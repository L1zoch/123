from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import random
import os
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

BALANCES_FILE = "balances.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ñ–∞–π–ª–∞
def load_balances():
    if not os.path.exists(BALANCES_FILE):
        return {}
    with open(BALANCES_FILE, "r", encoding="utf-8") as file:
        return json.load(file)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ñ–∞–π–ª
def save_balances(balances):
    with open(BALANCES_FILE, "w", encoding="utf-8") as file:
        json.dump(balances, file, ensure_ascii=False, indent=4)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [[InlineKeyboardButton("–¢–∞–ø–Ω–∏ –º–µ–Ω—è!", callback_data='tap')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–°–∞–ª–∞–º –∑–∞–µ–±–∞–ª! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫–µ—à!",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def tap(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user = query.from_user

    balances = load_balances()
    user_id = str(user.id)
    coins = random.randint(1, 10)

    balances[user_id] = balances.get(user_id, 0) + coins
    save_balances(balances)

    await query.edit_message_text(
        text=f"üéâ {user.first_name}, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {coins} –º–µ–º–∫–æ–∏–Ω–æ–≤!\n"
             f"üí∞ –í—Å–µ–≥–æ —É –≤–∞—Å: {balances[user_id]} –º–µ–º–∫–æ–∏–Ω–æ–≤.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–∞–ø–Ω–∏ —Å–Ω–æ–≤–∞!", callback_data='tap')]
        ])
    )

# –ö–æ–º–∞–Ω–¥–∞ /balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    balances = load_balances()
    user_balance = balances.get(str(user.id), 0)
    await update.message.reply_text(f"üíº –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –º–µ–º–∫–æ–∏–Ω–æ–≤.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(API_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CallbackQueryHandler(tap, pattern="tap"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()
